#include <iostream>
using namespace std;

const int DefaultSize = 10;

class Array
{
public:
  // конструктори
  Array(int itsSize = DefaultSize);
  Array(const Array &rhs);
  ~Array() { delete[] pType; }
  // оператори
  Array &operator=(const Array &);
  int &operator[](int offSet);
  const int &operator[](int offSet) const;
  // методи доступу
  int GetitsSize() const { return itsSize; }
  // функція-друг
  friend ostream &operator<<(ostream &, const Array &);
  class xBoundary
  {
  }; // Визначаємо клас винятків
private:
  int * pType;
  int itsSize;
};

Array::Array(int size) : itsSize(size)
{
  pType = new int[size];
  for (int i = 0; i < size; i++)
  pType[i] = 0;
}

Array &Array::operator=(const Array &rhs)
{
  if (this == &rhs)
  return *this;
  delete [] pType;
  itsSize = rhs.GetitsSize();
  pType = new int[itsSize];
  for (int i = 0; i < itsSize; i++)
  pType[i] = rhs[i];
  return *this;
}

Array::Array(const Array &rhs)
{
  itsSize = rhs.GetitsSize();
  pType = new int[itsSize];
  for (int i = 0; i < itsSize; i++)
  pType[i] = rhs[i];
}

int &Array::operator[](int offSet)
{
  int size = GetitsSize();
  if (offSet >= 0 && offSet < GetitsSize())
  return pType [offSet];
  throw xBoundary();
}

const int &Array::operator[](int offSet) const
{
  int mysize = GetitsSize();
  if (offSet >= 0 && offSet < GetitsSize())
  return pType [offSet];
  throw xBoundary();
}

ostream &operator<<(ostream &output, const Array &theArray)
{
  for (int i = 0; i < theArray.GetitsSize(); i++)
  output << "[" << i << "]" << theArray[i] << endl;
  return output;
}

int main()
{
  Array intArray(20);
  try
  {
    for (int j = 0; j < 100; j++)
     {
        intArray[j] = j;
        cout << "intArray[" << j << "] okay..." << endl;
      }
  }
  catch (Array::xBoundary)
  {
    cout << "Unable to process your input!\n";
  }

  cout << "Done.\n";
  return 0;
}
////
intArray[0] okay...
intArray[1] okay...
intArray[2] okay...
intArray[3] okay...
intArray[4] okay...
intArray[5] okay...
intArray[6] okay...
intArray[7] okay...
intArray[8] okay...
intArray[9] okay...
intArray[10] okay...
intArray[11] okay...
intArray[12] okay...
intArray[13] okay...
intArray[14] okay...
intArray[15] okay...
intArray[16] okay...
intArray[17] okay...
intArray[18] okay...
intArray[19] okay...
Unable to process your input!
Done.

