#include <iostream>

using namespace std;

class SimpleCat
{
public:
	SimpleCat();
	SimpleCat(SimpleCat &);
	~SimpleCat();

	int GetAge() const { return itsAge; }
	void SetAge(int age) { itsAge = age; }

private:
	int itsAge;
};

SimpleCat::SimpleCat()
{
	cout << "SimpleCat constructor...\n";
	itsAge = 1;
}

SimpleCat::SimpleCat(SimpleCat &)
{
	cout << "SimpleCat copy constructor...\n";
}

SimpleCat::~SimpleCat()
{
	cout << "SimpleCat destructor...\n";
}

SimpleCat &TheFunctuon();

int main()
{
	SimpleCat &rCat = TheFunctuon();
	int age = rCat.GetAge();
	cout << "rCat " << age << " years old!\n";

	return 0;
}

SimpleCat FunctuonOne(SimpleCat theCat)
{
	cout << "Function One. Returning...\n";
	return theCat;
}

SimpleCat &TheFunctuon()
{
	SimpleCat Frisky;
	return Frisky;
}
////
warning: reference to stack memory associated with local variable 'Frisky' returned
