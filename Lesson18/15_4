#include <iostream>
#include <string>

using namespace std;

class String
{
public:
    // конструктори
    String();
    String(const char *const);
    String(const String &);
    ~String();
    // Перевантажені оператори
    char &operator[](int offset);
    char operator[](int offset) const;
    String operator+(const String &);
    void operator+=(const String &);
    String &operator=(const String &);
    // Загальні методи доступу
    int GetLen() const { return itsLen; }
    const char *GetString() const { return itsString; }
    // Статичний цілочисельний лічильник ConstructorCount;
    static int ConstructorCount;

private:
    String(int); // закритий конструктор
    char *itsString;
    unsigned short itsLen;
};

// конструктор класу String за замовчуванням створює рядок завдовжки 0 байт
String::String()
{
    itsString = new char[1];
    itsString[0] = '\0';
    itsLen = 0;
    cout << "\tDefault string constructor\n";
    ConstructorCount++;
}

// закритий конструктор, який використовується тільки
// методами класу до створення нового рядка
// Вказаного розміру, заповненого нулями
String::String(int len)
{
    itsString = new char[len + 1];
    for (int i = 0; i <= len; i++)
        itsString[i] = '\0';
    itsLen = len;
    cout << "\tString(int) constructor\n";
    ConstructorCount++;
}

// Перетворює масив символів у рядок
String::String(const char *const cString)
{
    itsLen = strlen(cString);
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = cString[i];
    itsString[itsLen] = '\0';
    cout << "\tString(char*) constructor\n";
    ConstructorCount++;
}

// Конструктор-копіювальник
String::String(const String &rhs)
{
    itsLen = rhs.GetLen();
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = rhs[i];
    itsString[itsLen] = '\0';
    cout << "\tString(String&) constructor\n";
    ConstructorCount++;
}

// Деструктор звільняє зайняту пам'ять
String::~String()
{
    delete[] itsString;
    itsLen = 0;
    cout << "\tString destructor\n";
}

// Цей оператор звільняє пам'ять, та був
// копіює рядок ірозмір
String &String::operator=(const String &rhs)
{
    if (this == &rhs)
        return *this;
    delete[] itsString;
    itsLen = rhs.GetLen();
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = rhs[i];
    itsString[itsLen] = '\0';
    return *this;
    cout << "\tString operator=\n";
}

// Неконстантний оператор індексування.
// Повертає посилання символ, який можна
// Змінити
char &String::operator[](int offset)
{
    if (offset > itsLen)
        return itsString[itsLen - 1];
    else
        return itsString[offset];
}

// Константний оператор індексування,
// використовується для константних об'єктів (див. конструктор-копіювальник! )
char String::operator[](int offset) const
{
    if (offset > itsLen)
        return itsString[itsLen - 1];
    else
        return itsString[offset];
}

// створює новий рядок, додаючи поточний
// Рядок до rhs
String String::operator+(const String &rhs)
{
    int totalLen = itsLen + rhs.GetLen();
    String temp(totalLen);
    int i, j;
    for (i = 0; i < itsLen; i++)
        temp[i] = itsString[i];
    for (j = 0; j < rhs.GetLen(); j++, i++)
        temp[i] = rhs[j];
    temp[totalLen] = '\0';
    return temp;
}

// змінює поточний рядок, нічого не повертаючи
void String::operator+=(const String &rhs)
{
    unsigned short rhsLen = rhs.GetLen();
    unsigned short totalLen = itsLen + rhsLen;
    String temp(totalLen);
    int i, j;
    for (i = 0; i < itsLen; i++)
        temp[i] = itsString[i];
    for (j = 0; j < rhs.GetLen(); j++, i++)
        temp[i] = rhs[i - itsLen];
    temp[totalLen] = '\0';
    *this = temp;
}

int String::ConstructorCount = 0;
//////////////
#include <iostream>
#include "String.h"

using namespace std;

class Employee
{
public:
    Employee();
    Employee(char *, char *, char *, long);
    ~Employee();
    Employee(const Employee &);
    Employee &operator=(const Employee &);

    const String &GetFirstName() const { return itsFirstName; }
    const String &GetLastName() const { return itsLastName; }
    const String &GetAddress() const { return itsAddress; }
    long GetSalary() const { return itsSalary; }

    void SetFirstName(const String &fName) { itsFirstName = fName; }
    void SetLastName(const String &fName) { itsLastName = fName; }
    void SetAddress(const String &address) { itsAddress = address; }
    void SetSalary(long salary)
    {
        itsSalary = salary;
    }

private:
    String itsFirstName;
    String itsLastName;
    String itsAddress;
    long itsSalary;
};

Employee::Employee() : itsFirstName(""),
                       itsLastName(""),
                       itsAddress(""),
                       itsSalary(0)
{
}

Employee::Employee(char *firstName, char *lastName, char *address, long salary) : itsFirstName(firstName),
                                                                                  itsLastName(lastName),
                                                                                  itsAddress(address),
                                                                                  itsSalary(salary)
{
}

Employee::Employee(const Employee &rhs) : itsFirstName(rhs.GetFirstName()),
                                          itsLastName(rhs.GetLastName()),
                                          itsAddress(rhs.GetAddress()),
                                          itsSalary(rhs.GetSalary())
{
}

Employee::~Employee() {}

Employee &Employee::operator=(const Employee &rhs)
{
    if (this == &rhs)
        return *this;

    itsFirstName = rhs.GetFirstName();
    itsLastName = rhs.GetLastName();
    itsAddress = rhs.GetAddress();
    itsSalary = rhs.GetSalary();

    return *this;
}

void PrintFunc(Employee);
void rPrintFunc(const Employee &);

int main()
{
    Employee Edie("Jane", "Doe", "1461 Shore Parkway", 20000);
    Edie.SetSalary(20000);
    Edie.SetFirstName("Edythe");
    String LastName("Levine");
    Edie.SetLastName(LastName);
    cout << "Constructor count: ";
    cout << String::ConstructorCount << endl;
    rPrintFunc(Edie);
    cout << "Constructor count: ";
    cout << String::ConstructorCount << endl;
    PrintFunc(Edie);
    cout << "Constructor count: ";
    cout << String::ConstructorCount << endl;
    return 0;
}

void PrintFunc(Employee Edie)
{
    cout << "Name: ";
    cout << Edie.GetFirstName().GetString();
    cout << " " << Edie.GetLastName().GetString();
    cout << " .\nAddress: ";
    cout << Edie.GetAddress().GetString();
    cout << ".\nSalary: ";
    cout << Edie.GetSalary();
    cout << endl;
}

void rPrintFunc(const Employee &Edie)
{
    cout << "Name: ";
    cout << Edie.GetFirstName().GetString();
    cout << " " << Edie.GetLastName().GetString();
    cout << "\nAddress: ";
    cout << Edie.GetAddress().GetString();
    cout << "\nSalary: ";
    cout << Edie.GetSalary();
    cout << endl;
}
///////
        String(char*) constructor
        String(char*) constructor
        String(char*) constructor
        String(char*) constructor
        String destructor
        String(char*) constructor
Constructor count: 5
Name: Edythe Levine
Address: 1461 Shore Parkway
Salary: 20000
Constructor count: 5
        String(String&) constructor
        String(String&) constructor
        String(String&) constructor
Name: Edythe Levine .
Address: 1461 Shore Parkway.
Salary: 20000
        String destructor
        String destructor
        String destructor
Constructor count: 8
        String destructor
        String destructor
        String destructor
        String destructor
