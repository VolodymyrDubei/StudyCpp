#include <iostream>

using namespace std;

// Абстракний класс всіх деталей
class Part
{
public:
    Part() : itsPartNumber(1) {}
    Part(int PartNumber) : itsPartNumber(PartNumber) {}
    virtual ~Part() {}
    int GetPartNumber() const
    {
        return itsPartNumber;
    }

    virtual void Display() const = 0;

private:
    int itsPartNumber;
};

// виконання читої віртуальної функції в
// стандартному вигляді для всіх похідних класів
void Part::Display() const
{
    cout << "\nPart Number: " << itsPartNumber << endl;
}

// Автомобільні деталі
class CarPart : public Part
{
public:
    CarPart() : itsModelYear(94) {}
    CarPart(int year, int partNumber);
    virtual void Display() const
    {
        Part::Display();
        cout << "Model Year: ";
        cout << itsModelYear << endl;
    }

private:
    int itsModelYear;
};

CarPart::CarPart(int year, int partNumber) : itsModelYear(year),
                                             Part(partNumber)
{
}

// Авіаційні деталі
class AirPlanePart : public Part
{
public:
    AirPlanePart() : itsEngineNumber(1){};
    AirPlanePart(int EngineNumber, int PartNumber);
    virtual void Display() const
    {
        Part::Display();
        cout << " Engine No.: ";
        cout << itsEngineNumber << endl;
    }

private:
    int itsEngineNumber;
};

AirPlanePart::AirPlanePart(int EngineNumber, int PartNumber) : itsEngineNumber(EngineNumber),
                                                               Part(PartNumber)
{
}

// Вузли списку деталей
class PartNode
{
public:
    PartNode(Part *);
    ~PartNode();
    void SetNext(PartNode *node)
    {
        itsNext = node;
    }
    PartNode *GetNext() const;
    Part *GetPart() const;

private:
    Part *itsPart;
    PartNode *itsNext;
};

PartNode::PartNode(Part *pPart) : itsPart(pPart),
                                  itsNext(0)
{
}

PartNode::~PartNode()
{
    delete itsPart;
    itsPart = nullptr;
    delete itsNext;
    itsNext = nullptr;
}

// повертається nullptr, якщо немає наступного вузла PartNode
PartNode *PartNode::GetNext() const
{
    return itsNext;
}

Part *PartNode::GetPart() const
{
    if (itsPart)
        return itsPart;
    else
        return nullptr;
}

// Список деталей
class PartsList
{
public:
    PartsList();
    ~PartsList();
    // необхідно, щоб конструктор копіювання і оператор відповідали один одноиу!
    void Iterate(void (Part::*f)() const) const;
    Part *Find(int &position, int PartNumber) const;
    Part *GetFirst() const;
    void Insert(Part *);
    Part *operator[](int) const;
    int GetCount() const { return itsCount; }
    static PartsList &GetGiobalPartsList() { return GlobalPartsList; }

private:
    PartNode *pHead;
    int itsCount;
    static PartsList GlobalPartsList;
};

PartsList PartsList::GlobalPartsList;

PartsList::PartsList() : pHead(0),
                         itsCount(0)
{
}

PartsList::~PartsList()
{
    delete pHead;
}

Part *PartsList::GetFirst() const
{
    if (pHead)
        return pHead->GetPart();
    else
        return nullptr; // пастка помилки
}

Part *PartsList::operator[](int offSet) const
{
    PartNode *pNode = pHead;

    if (!pHead)
        return nullptr; // пастка помилки

    if (offSet > itsCount)
        return nullptr; // помилка

    for (int i = 0; i < offSet; i++)
        pNode = pNode->GetNext();
    return pNode->GetPart();
}

Part *PartsList::Find(int &position, int PartNumber) const
{
    PartNode *pNode = nullptr;
    for (pNode = pHead, position = 0;
         pNode != nullptr;
         pNode = pNode->GetNext(), position++)
    {
        if (pNode->GetPart()->GetPartNumber() == PartNumber)
            break;
    }

    if (pNode == nullptr)
        return nullptr;
    else
        return pNode->GetPart();
}

void PartsList::Iterate(void (Part::*func)() const) const
{
    if (!pHead)
        return;
    PartNode *pNode = pHead;
    do
    {
        (pNode->GetPart()->*func)();
        pNode = pNode->GetNext();
    } while (pNode);
}

void PartsList::Insert(Part *pPart)
{
    PartNode *pNode = new PartNode(pPart);
    PartNode *pCurrent = pHead;
    PartNode *pNext = nullptr;
    int New = pPart->GetPartNumber();
    int Next = 0;
    itsCount++;
    if (!pHead)
    {
        pHead = pNode;
        return;
    }
    // якщо значення меньше головного вузла,
    // то поточний вузол стає головним
    if (pHead->GetPart()->GetPartNumber() > New)
    {
        pNode->SetNext(pHead);
        pHead = pNode;
        return;
    }
    for (;;)
    {
        // якщо немає наступного, вставляється поточний
        if (!pCurrent->GetNext())
        {
            pCurrent->SetNext(pNode);
            return;
        }

        // якщо поточний більший попереднього, але меньший наступного, то вставляємо
        // тут, Інакше присвоюємо значення вказівнику Next
        pNext = pCurrent->GetNext();
        Next = pNext->GetPart()->GetPartNumber();
        if (Next > New)
        {
            pCurrent->SetNext(pNode);
            pNode->SetNext(pNext);
            return;
        }

        pCurrent = pNext;
    }
}

class PartsCatalog : private PartsList
{
public:
    void Insert(Part *);
    int Exists(int PartNumber);
    Part *Get(int PartNumber);
    int operator+(const PartsCatalog &);
    void ShowAll() { Iterate(&Part::Display); }
};

void PartsCatalog::Insert(Part *newPart)
{
    int partNumber = newPart->GetPartNumber();
    int offset;
    if (!Find(offset, partNumber))
        PartsList::Insert(newPart);
    else
    {
        cout << partNumber << " was the ";
        switch (offset)
        {
        case 0:
            cout << "first";
            break;
        case 1:
            cout << "second";
            break;
        case 2:
            cout << "third";
            break;
        default:
            cout << offset + 1 << "th ";
        }
        cout << " entry. Rejected!\n";
    }
}

int PartsCatalog::Exists(int PartNumber)
{
    int offset;
    Find(offset, PartNumber);
    return offset;
}

Part *PartsCatalog::Get(int PartNumber)
{
    int offset;
    Part *thePart = Find(offset, PartNumber);
    return thePart;
}

int main()
{
    PartsCatalog pc;
    Part *pPart = nullptr;
    int PartNumber;
    int value;
    int choice;

    while (true)
    {
        cout << "(0)Quit (1)Car (2)Plane: ";
        cin >> choice;

        if (!choice)
            break;

        cout << "New PartNumber?: ";
        cin >> PartNumber;

        if (choice == 1)
        {
            cout << "Model Year?: ";
            cin >> value;
            pPart = new CarPart(value, PartNumber);
        }
        else
        {
            cout << "Engine Number?: ";
            cin >> value;
            pPart = new AirPlanePart(value, PartNumber);
        }
        pc.Insert(pPart);
    }
    pc.ShowAll();

    return 0;
}
//////////
(0)Quit (1)Car (2)Plane: 1
New PartNumber?: 1234
Model Year?: 94
(0)Quit (1)Car (2)Plane: 1
New PartNumber?: 4434
Model Year?: 93
(0)Quit (1)Car (2)Plane: 1
New PartNumber?: 1234
Model Year?: 94
1234 was the first entry. Rejected!
(0)Quit (1)Car (2)Plane: 1
New PartNumber?: 2345
Model Year?: 93
(0)Quit (1)Car (2)Plane: 0

Part Number: 1234
Model Year: 94

Part Number: 2345
Model Year: 93

Part Number: 4434
Model Year: 93
