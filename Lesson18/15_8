#include <iostream>
#include <string>

using namespace std;

class String
{
public:
    // конструктори
    String();
    String(const char *const);
    String(const String &);
    ~String();

    // Перевантажені оператори
    char &operator[](int offset);
    char operator[](int offset) const;
    String operator+(const String &);
    friend String operator+(const String &, const String &);
    void operator+=(const String &);
    String &operator=(const String &);

    // Загальні методи доступу
    int GetLen() const { return itsLen; }
    const char *GetString() const { return itsString; }
    // Статичний цілочисельний лічильник ConstructorCount;
    // static int ConstructorCount;

private:
    String(int); // закритий конструктор
    char *itsString;
    unsigned short itsLen;
};

// конструктор класу String за замовчуванням створює рядок завдовжки 0 байт
String::String()
{
    itsString = new char[1];
    itsString[0] = '\0';
    itsLen = 0;
    // cout << "\tDefault string constructor\n";
    // ConstructorCount++;
}

// закритий конструктор, який використовується тільки
// методами класу до створення нового рядка
// Вказаного розміру, заповненого нулями
String::String(int len)
{
    itsString = new char[len + 1];
    for (int i = 0; i <= len; i++)
        itsString[i] = '\0';
    itsLen = len;
    // cout << "\tString(int) constructor\n";
    // ConstructorCount++;
}

// Перетворює масив символів у рядок
String::String(const char *const cString)
{
    itsLen = strlen(cString);
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = cString[i];
    itsString[itsLen] = '\0';
    // cout << "\tString(char*) constructor\n";
    // ConstructorCount++;
}

// Конструктор-копіювальник
String::String(const String &rhs)
{
    itsLen = rhs.GetLen();
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = rhs[i];
    itsString[itsLen] = '\0';
    // cout << "\tString(String&) constructor\n";
    // ConstructorCount++;
}

// Деструктор звільняє зайняту пам'ять
String::~String()
{
    delete[] itsString;
    itsLen = 0;
    // cout << "\tString destructor\n";
}

// Цей оператор звільняє пам'ять, та був
// копіює рядок ірозмір
String &String::operator=(const String &rhs)
{
    if (this == &rhs)
        return *this;
    delete[] itsString;
    itsLen = rhs.GetLen();
    itsString = new char[itsLen + 1];
    for (int i = 0; i < itsLen; i++)
        itsString[i] = rhs[i];
    itsString[itsLen] = '\0';
    return *this;
    // cout << "\tString operator=\n";
}

// Неконстантний оператор індексування.
// Повертає посилання символ, який можна
// Змінити
char &String::operator[](int offset)
{
    if (offset > itsLen)
        return itsString[itsLen - 1];
    else
        return itsString[offset];
}

// Константний оператор індексування,
// використовується для константних об'єктів (див. конструктор-копіювальник! )
char String::operator[](int offset) const
{
    if (offset > itsLen)
        return itsString[itsLen - 1];
    else
        return itsString[offset];
}

// створює новий рядок, додаючи поточний
// Рядок до rhs
String String::operator+(const String &rhs)
{
    int totalLen = itsLen + rhs.GetLen();
    String temp(totalLen);
    int i, j;
    for (i = 0; i < itsLen; i++)
        temp[i] = itsString[i];
    for (j = 0; j < rhs.GetLen(); j++, i++)
        temp[i] = rhs[j];
    temp[totalLen] = '\0';
    return temp;
}

// створює новий рядок
// із двох
String operator+(const String &lhs, const String &rhs)
{
    int totalLen = lhs.GetLen() + rhs.GetLen();
    String temp(totalLen);
    int i, j;
    for (i = 0; i < lhs.GetLen(); i++)
        temp[i] = lhs[i];
    for (j = 0, i < lhs.GetLen(); j < rhs.GetLen(); j++, i++)
        temp[i] = rhs[j];
    temp[totalLen] = '\0';
    return temp;
}

// змінює поточний рядок, нічого не повертаючи
void String::operator+=(const String &rhs)
{
    unsigned short rhsLen = rhs.GetLen();
    unsigned short totalLen = itsLen + rhsLen;
    String temp(totalLen);
    int i, j;
    for (i = 0; i < itsLen; i++)
        temp[i] = itsString[i];
    for (j = 0; j < rhs.GetLen(); j++, i++)
        temp[i] = rhs[i - itsLen];
    temp[totalLen] = '\0';
    *this = temp;
}

// int String::ConstructorCount = 0;
//////////
#include <iostream>
#include "String.h"

using namespace std;

int main()
{
    String s1("StringOne ");
    String s2("String Two ");
    char *c1 = {"C-String One "};
    String s3;
    String s4;
    String s5;
    cout << "s1: " << s1.GetString() << endl;
    cout << "s2: " << s2.GetString() << endl;
    cout << "c1: " << c1 << endl;
    s3 = s1 + s2;
    cout << "s3: " << s3.GetString() << endl;
    s4 = s1 + c1;
    cout << "s4: " << s4.GetString() << endl;
    s5 = c1 + s2;
    cout << "s5: " << s5.GetString() << endl;

    return 0;
}
///////
s1: StringOne 
s2: String Two 
c1: C-String One 
s3: StringOne String Two 
s4: StringOne C-String One 
s5: C-String One String Two 
